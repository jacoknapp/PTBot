name: ci

on:
  push:
    branches: [ "**" ]
    tags:     [ "v*" ]

permissions:
  contents: read
  packages: write

jobs:
  go-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Prepare dependencies
        run: |
          go mod tidy
          go mod download
          go get -u ./...

      - name: Vet
        run: go vet ./...

      - name: Build
        run: go build -v ./...

      - name: Test
        run: |
          if find . -name '*_test.go' | grep -q .; then
            go test ./...
          else
            echo "No tests found; skipping."
          fi

  build-and-push:
    needs: go-validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Detect supported platforms
        id: platforms
        shell: bash
        run: |
          set -euo pipefail
          # Determine the widest set of platforms supported by both base images
          BUILDER_IMAGE="golang:1.25"
          RUNTIME_IMAGE="gcr.io/distroless/static:nonroot"

          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq > /dev/null
          fi

          to_list() {
            local image="$1"
            # Use buildx imagetools to fetch the raw manifest and extract linux platforms
            docker buildx imagetools inspect --raw "$image" \
            | jq -r '[.manifests[]? | select(.platform.os=="linux") | 
                      (.platform.os + "/" + .platform.architecture + (if (.platform.variant // "") != "" then "/" + .platform.variant else "" end))] 
                     | unique | .[]' \
            | sort -u
          }

          mapfile -t BUILDER_PLATFORMS < <(to_list "$BUILDER_IMAGE" || true)
          mapfile -t RUNTIME_PLATFORMS < <(to_list "$RUNTIME_IMAGE" || true)

          # If either list is empty, fall back to a safe default
          if [ ${#BUILDER_PLATFORMS[@]} -eq 0 ] || [ ${#RUNTIME_PLATFORMS[@]} -eq 0 ]; then
            FALLBACK="linux/amd64,linux/arm64,linux/arm/v7"
            echo "list=$FALLBACK" >> "$GITHUB_OUTPUT"
            echo "Using fallback platforms: $FALLBACK"
            exit 0
          fi

          # Compute intersection
          printf '%s\n' "${BUILDER_PLATFORMS[@]}" | sort -u > /tmp/builder.txt
          printf '%s\n' "${RUNTIME_PLATFORMS[@]}" | sort -u > /tmp/runtime.txt
          INTERSECTION=$(grep -Fxf /tmp/builder.txt /tmp/runtime.txt | sort -u)

          if [ -z "$INTERSECTION" ]; then
            FALLBACK="linux/amd64,linux/arm64,linux/arm/v7"
            echo "list=$FALLBACK" >> "$GITHUB_OUTPUT"
            echo "No intersection found; using fallback platforms: $FALLBACK"
          else
            LIST=$(echo "$INTERSECTION" | paste -sd, -)
            echo "list=$LIST" >> "$GITHUB_OUTPUT"
            echo "Detected platforms: $LIST"
          fi

      - name: Login to git
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASS }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}
            ghcr.io/${{ vars.IMAGE_NAME }}
          tags: |
            type=sha,prefix=sha-,format=short
            type=ref,event=tag
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Login to external GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: ${{ steps.platforms.outputs.list }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}




